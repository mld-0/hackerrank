from itertools import permutations
from typing import List

#   a triangle is valid if:
#   a + b > c 
#   a + c > b 
#   b + c > a  
def isValidTriangleTriplet(values: List[int]) -> bool:
    values = sorted(values)
    a = values[0]
    b = values[1]
    c = values[2]
    return (a + b > c) and (a + c > b) and (b + c > a)

def maximumPerimeterTriangle(sticks: List[int]) -> List[int]:
    # Write your code here
    valid_triplets = set([ tuple(sorted(x)) for x in permutations(sticks, 3) if isValidTriangleTriplet(x) ])

    if len(valid_triplets) == 0:
        return [-1]
    triplets_length = [ sum(x) for x in valid_triplets ]

    zipped = zip(triplets_length, valid_triplets)
    zipped = sorted(zipped)[::-1]
    triplets_length, valid_triplets = zip(*zipped)
    
    #   get triplets which sum to max_perimeter
    max_perimeter = triplets_length[0]
    valid_triplets = [ x for x in valid_triplets if sum(x) == max_perimeter ]
    if len(valid_triplets) == 1:
        return valid_triplets[0]
    
    max_length_index = 0
    max_length_value = -math.inf
    
    for i in range(len(valid_triplets)):
        if max(valid_triplets[i]) > max_length_value:
            max_length_value = max(valid_triplets[i])
            max_length_index = i
    
    return valid_triplets[max_length_index]
   

input_values = [ [1,2,3,4,5,10], [1,1,1,3,3], [1,2,3], [1,1,1,2,3,5], [3,9,2,15,3], 
	[50,2430,134,6373,215,1502,926,10312,351,74,572,3938], [9, 2015, 5294, 58768, 285, 477, 72, 13867, 97, 22445, 48, 36318, 764, 8573, 183, 3270, 81, 1251, 59, 95094],
	[34, 1924, 565, 80, 848, 2913, 819, 732, 431, 32981, 195, 86340, 688, 563, 7763, 314, 12608, 401, 4845, 439, 353, 52, 208, 20372, 626, 805, 19, 984, 939, 53354],
	[537, 6494, 4166, 7388, 19855, 6023, 6599, 6264, 2139, 9468, 129280, 29846, 546999, 7067, 208844, 885139, 79558, 2257, 49705, 9553, 3869, 6354, 7911, 5672, 914, 9990, 7701, 4744, 2399, 1432139, 6177, 5645, 4732, 7987, 6181, 1440, 8695, 9855, 338136, 4845],
	[1, 28657, 55, 1346269, 121393, 4181, 17711, 2584, 233, 3, 701408733, 63245986, 21, 75025, 13, 3524578, 34, 10946, 5, 196418, 46368, 8, 102334155, 987, 9227465, 1597, 610, 317811, 267914296, 1, 144, 2178309, 165580141, 514229, 832040, 377, 6765, 2, 89, 24157817, 433494437, 5702887, 39088169, 14930352],
	[76361, 69365, 78109, 44475, 13538, 5084, 1371, 6453, 83726, 94527, 401820417, 13839263, 768933, 22392673, 153481704, 88347, 44593, 5285782, 191555, 58624780, 248338678, 26826, 70078, 97005, 26139, 25664, 68595, 83568, 36232035, 3267536, 78837, 22863, 36133, 2409, 44739, 2018202, 35222, 650159152, 1249262, 31720, 66102, 39532, 94856906, 77216, 8553388, 480240, 288620, 59954, 36981],
	[585864, 30960, 397193, 982469, 275301, 815633, 500552, 1980053, 4956083, 563585, 619528, 879603, 467531, 927141, 393527, 917709, 350333, 54529145, 7932125, 963208, 520081, 142767080, 499865, 582730, 512174, 20820393, 575285, 592595, 33708702, 364190, 289354, 351506, 995836, 228962, 326149, 2975979, 420118, 984155, 620289, 508798, 199101, 517109, 12888237, 88237927, 928368, 137821, 825743, 274447, 411970, 951836],
	[3900717, 53516059, 288589053, 23189292, 21487730, 94997775, 260173, 41298280, 47784002, 23032379, 67686298, 48162481, 44775136, 47340544, 2165965, 34202258, 81746554, 57179615, 6240306, 33110389, 7424599, 41389013, 480910581, 86150390, 13777985, 96265144, 89266112, 316419, 74896112, 192317271, 63729818, 40712188, 19111441, 25556170, 33808338, 96043868, 90508879, 88229925, 62520492, 49835454, 78096135, 54610351, 78888361, 10300724, 34843471, 38439667, 81892481, 16254176, 24261693, 84190486],
	[1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000],
]
input_checks = [ [3,4,5], [1,3,3], [-1], [1,1,1], [2,3,3], [-1], [72,81,97], [848,939,984], [9553,9855,9990], [-1], [88347,94527,97005], [982469,984155,995836], [94997775,96043868,96265144], [1000000000,1000000000,1000000000], ]
assert (len(input_values) == len(input_checks)), "Check comparison failed"

for sticks, check in zip(input_values, input_checks):
    print("sticks=(%s)" % sticks)
    result = maximumPerimeterTriangle(sticks)
    print("result=(%s)" % str(result))
    assert (list(result) == check), "Check comparison failed"
    print()

